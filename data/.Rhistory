p_load(char = cran_packages, install = TRUE)
################################################################################
#####################  Load and Parse OWL File ##################################
################################################################################
# Define the OWL file path
owl_file <- file.path(base_dir, "vo.owl")
# Load OWL file as RDF
rdf <- rdf_parse(owl_file)
# Function to extract ontology relationships
get_filtered_ontology_relations <- function(rdf) {
query <- '
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT ?child ?parent WHERE { ?child rdfs:subClassOf ?parent . }'
triples <- rdf_query(rdf, query)
if (is.null(triples) || nrow(triples) == 0) {
stop("No subclass relationships found. Ensure the OWL file is structured correctly.")
}
colnames(triples) <- c("Child", "Parent")
triples <- triples %>%
mutate(
Child = gsub(".*/", "", Child),
Parent = gsub(".*/", "", Parent)
) %>%
filter(grepl("^VO_", Child) & grepl("^VO_", Parent)) %>%
distinct(Child, Parent)
return(triples)
}
################################################################################
#####################  Build Hierarchy Network (Find Level 2 Ancestors) ########
################################################################################
# Extract ontology relations
ontology_relations <- get_filtered_ontology_relations(rdf)
# Create directed graph
g <- graph_from_data_frame(ontology_relations, directed = TRUE)
# Ensure VO_0000001 is present
if (!"VO_0000001" %in% V(g)$name) {
stop("VO_0000001 is not in the ontology. Check the OWL file.")
}
# Get all direct children of VO_0000001 (Level 2 terms)
level2_terms <- neighbors(g, "VO_0000001", mode = "in")$name
# Function to find the closest Level 2 ancestor for a given VO_ID
find_closest_level2 <- function(vo_id) {
if (!vo_id %in% V(g)$name) return(NA)  # Skip if term is not in ontology
# Get all shortest paths from the given term to Level 2 terms
paths <- shortest_paths(g, from = vo_id, to = level2_terms, mode = "out")$vpath
# Find the shortest path to any Level 2 term
valid_paths <- Filter(length, paths)  # Remove empty paths
if (length(valid_paths) == 0) return(NA)  # No path found
shortest_path <- valid_paths[[which.min(lengths(valid_paths))]]  # Select the shortest one
closest_ancestor <- tail(shortest_path, n = 1)$name  # Get last node (Level 2 term)
return(closest_ancestor)
}
################################################################################
#####################  Load Excel Data Files  ##################################
################################################################################
# Define the Excel file path
excel_file <- file.path(base_dir, "UniqueStudy_VOIDs.xlsx")
# Load study data
figure_data <- read_excel(excel_file, sheet = "Data for Figure") %>%
rename(VO_ID = 1, Vaccine = 2, Study_num = 3, Pathogen_Type = 4, Disease = 5)
immport_data <- read_excel(excel_file, sheet = "ImmPortSTUDY_VO_Simple") %>%
rename(VO_ID = 1, STUDY_ACCESSION = 2, VO_Label = 3)
# Merge data
vo_map <- figure_data %>%
select(VO_ID, Pathogen_Type, Disease) %>%
filter(complete.cases(.)) %>%
distinct()
merged_data <- immport_data %>%
left_join(vo_map, by = "VO_ID") %>%
filter(complete.cases(.)) %>%
distinct()
# Print data summary
cat("Original immport data rows:", nrow(immport_data), "\n")
cat("Merged data rows with complete data:", nrow(merged_data), "\n")
# Create study count table
explicit_counts <- merged_data %>%
group_by(VO_ID, VO_Label, Pathogen_Type, Disease) %>%
summarise(
STUDY_ACCESS_IDs = paste(sort(unique(STUDY_ACCESSION)), collapse=", "),
explicit_study_num = n_distinct(STUDY_ACCESSION),
.groups = "drop"
)
################################################################################
#####################  Map Each VO_ID to Its Level 2 Ancestor ##################
################################################################################
# Get VO terms from the Excel file
vo_terms_from_excel <- unique(figure_data$VO_ID)
# Apply function to find closest Level 2 ancestor
vo_hierarchy_mapping <- data.frame(
VO_ID = vo_terms_from_excel,
Level2_Ancestor = sapply(vo_terms_from_excel, find_closest_level2),
stringsAsFactors = FALSE
)
# Merge hierarchy mapping into study data
explicit_counts <- explicit_counts %>%
left_join(vo_hierarchy_mapping, by = "VO_ID")
# Print mapping summary
cat("\nHierarchy Mapping Summary:\n")
cat("Total VO terms in Excel:", length(vo_terms_from_excel), "\n")
cat("Successfully mapped to Level 2 terms:", sum(!is.na(vo_hierarchy_mapping$Level2_Ancestor)), "\n")
################################################################################
#####################  Calculate Implicit Study Counts  ########################
################################################################################
calculate_implicit_counts <- function(explicit_counts) {
all_counts <- explicit_counts %>%
mutate(implicit_study_num = explicit_study_num)
# Aggregate implicit study counts by Level 2 ancestor
implicit_counts <- explicit_counts %>%
group_by(Level2_Ancestor) %>%
summarise(
implicit_study_num = sum(explicit_study_num, na.rm = TRUE),
STUDY_ACCESS_IDs = paste(unique(STUDY_ACCESS_IDs), collapse=", "),
.groups = "drop"
) %>%
rename(VO_ID = Level2_Ancestor)
# Merge implicit counts back into main dataset
all_counts <- all_counts %>%
left_join(implicit_counts, by = "VO_ID", suffix = c("_explicit", "_implicit"))
return(all_counts)
}
# Compute implicit counts
final_counts <- calculate_implicit_counts(explicit_counts)
# Print summary
cat("\nFinal Study Count Summary:\n")
cat("Total explicit study terms:", nrow(explicit_counts), "\n")
cat("Total implicit study terms:", nrow(final_counts) - nrow(explicit_counts), "\n")
ontology_relations
level2_terms
neighbors(g, "VO_0000001", mode = "in")$name
?neighbors
# Define the Excel file path
excel_file <- file.path(base_dir, "UniqueStudy_VOIDs.xlsx")
# Load study data
figure_data <- read_excel(excel_file, sheet = "Data for Figure") %>%
rename(VO_ID = 1, Vaccine = 2, Study_num = 3, Pathogen_Type = 4, Disease = 5)
immport_data <- read_excel(excel_file, sheet = "ImmPortSTUDY_VO_Simple") %>%
rename(VO_ID = 1, STUDY_ACCESSION = 2, VO_Label = 3)
# Merge data
vo_map <- figure_data %>%
select(VO_ID, Pathogen_Type, Disease) %>%
filter(complete.cases(.)) %>%
distinct()
merged_data <- immport_data %>%
left_join(vo_map, by = "VO_ID") %>%
filter(complete.cases(.)) %>%
distinct()
# Print data summary
cat("Original immport data rows:", nrow(immport_data), "\n")
cat("Merged data rows with complete data:", nrow(merged_data), "\n")
# Create study count table
explicit_counts <- merged_data %>%
group_by(VO_ID, VO_Label, Pathogen_Type, Disease) %>%
summarise(
STUDY_ACCESS_IDs = paste(sort(unique(STUDY_ACCESSION)), collapse=", "),
explicit_study_num = n_distinct(STUDY_ACCESSION),
.groups = "drop"
)
################################################################################
#####################  Set Current Working Directory ###########################
################################################################################
# Ensure rstudioapi is installed
if (!requireNamespace("rstudioapi", quietly = TRUE)) {
install.packages("rstudioapi")
}
library(rstudioapi)
# Set the working directory to the script's location
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
print(current_path)
base_dir <- dirname(current_path)
################################################################################
#####################  Packages  ###############################################
################################################################################
# Install pacman for package management if not already installed
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman")
}
library(pacman)
# Required CRAN packages
cran_packages <- c(
"rdflib", "readxl", "ggplot2", "treemapify", "dplyr", "tidyr", "data.table",
"igraph"
)
# Automatically install and load CRAN packages
p_load(char = cran_packages, install = TRUE)
################################################################################
#####################  Load and Parse OWL File ##################################
################################################################################
# Define the OWL file path
owl_file <- file.path(base_dir, "vo.owl")
# Load OWL file as RDF
rdf <- rdf_parse(owl_file)
# Function to extract ontology relationships
get_filtered_ontology_relations <- function(rdf) {
query <- '
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT ?child ?parent WHERE { ?child rdfs:subClassOf ?parent . }'
triples <- rdf_query(rdf, query)
if (is.null(triples) || nrow(triples) == 0) {
stop("No subclass relationships found. Ensure the OWL file is structured correctly.")
}
colnames(triples) <- c("Child", "Parent")
triples <- triples %>%
mutate(
Child = gsub(".*/", "", Child),
Parent = gsub(".*/", "", Parent)
) %>%
filter(grepl("^VO_", Child) & grepl("^VO_", Parent)) %>%
distinct(Child, Parent)
return(triples)
}
################################################################################
#####################  Build Hierarchy Network (Find Level 2 Ancestors) ########
################################################################################
# Extract ontology relations
ontology_relations <- get_filtered_ontology_relations(rdf)
# Create directed graph
g <- graph_from_data_frame(ontology_relations, directed = TRUE)
# Ensure VO_0000001 is present
if (!"VO_0000001" %in% V(g)$name) {
stop("VO_0000001 is not in the ontology. Check the OWL file.")
}
# Get all direct children of VO_0000001 (Level 2 terms)
level2_terms <- neighbors(g, "VO_0000001", mode = "in")$name
# Function to find the closest Level 2 ancestor for a given VO_ID
find_closest_level2 <- function(vo_id) {
if (!vo_id %in% V(g)$name) return(NA)  # Skip if term is not in ontology
# Get all shortest paths from the given term to Level 2 terms
paths <- shortest_paths(g, from = vo_id, to = level2_terms, mode = "out")$vpath
# Find the shortest path to any Level 2 term
valid_paths <- Filter(length, paths)  # Remove empty paths
if (length(valid_paths) == 0) return(NA)  # No path found
shortest_path <- valid_paths[[which.min(lengths(valid_paths))]]  # Select the shortest one
closest_ancestor <- tail(shortest_path, n = 1)$name  # Get last node (Level 2 term)
return(closest_ancestor)
}
################################################################################
#####################  Load Excel Data Files  ##################################
################################################################################
# Define the Excel file path
excel_file <- file.path(base_dir, "UniqueStudy_VOIDs.xlsx")
# Load study data
figure_data <- read_excel(excel_file, sheet = "Data for Figure") %>%
rename(VO_ID = 1, Vaccine = 2, Study_num = 3, Pathogen_Type = 4, Disease = 5)
immport_data <- read_excel(excel_file, sheet = "ImmPortSTUDY_VO_Simple") %>%
rename(VO_ID = 1, STUDY_ACCESSION = 2, VO_Label = 3)
# Merge data
vo_map <- figure_data %>%
select(VO_ID, Pathogen_Type, Disease) %>%
filter(complete.cases(.)) %>%
distinct()
merged_data <- immport_data %>%
left_join(vo_map, by = "VO_ID") %>%
filter(complete.cases(.)) %>%
distinct()
# Print data summary
cat("Original immport data rows:", nrow(immport_data), "\n")
cat("Merged data rows with complete data:", nrow(merged_data), "\n")
# Create study count table
explicit_counts <- merged_data %>%
group_by(VO_ID, VO_Label, Pathogen_Type, Disease) %>%
summarise(
STUDY_ACCESS_IDs = paste(sort(unique(STUDY_ACCESSION)), collapse=", "),
explicit_study_num = n_distinct(STUDY_ACCESSION),
.groups = "drop"
)
################################################################################
#####################  Map Each VO_ID to Its Level 2 Ancestor ##################
################################################################################
# Get VO terms from the Excel file
vo_terms_from_excel <- unique(figure_data$VO_ID)
# Apply function to find closest Level 2 ancestor
vo_hierarchy_mapping <- data.frame(
VO_ID = vo_terms_from_excel,
Level2_Ancestor = sapply(vo_terms_from_excel, find_closest_level2),
stringsAsFactors = FALSE
)
# Merge hierarchy mapping into study data
explicit_counts <- explicit_counts %>%
left_join(vo_hierarchy_mapping, by = "VO_ID")
# Print mapping summary
cat("\nHierarchy Mapping Summary:\n")
cat("Total VO terms in Excel:", length(vo_terms_from_excel), "\n")
cat("Successfully mapped to Level 2 terms:", sum(!is.na(vo_hierarchy_mapping$Level2_Ancestor)), "\n")
################################################################################
#####################  Calculate Implicit Study Counts  ########################
################################################################################
calculate_implicit_counts <- function(explicit_counts) {
all_counts <- explicit_counts %>%
mutate(implicit_study_num = explicit_study_num)
# Aggregate implicit study counts by Level 2 ancestor
implicit_counts <- explicit_counts %>%
group_by(Level2_Ancestor) %>%
summarise(
implicit_study_num = sum(explicit_study_num, na.rm = TRUE),
STUDY_ACCESS_IDs = paste(unique(STUDY_ACCESS_IDs), collapse=", "),
.groups = "drop"
) %>%
rename(VO_ID = Level2_Ancestor)
# Merge implicit counts back into main dataset
all_counts <- all_counts %>%
left_join(implicit_counts, by = "VO_ID", suffix = c("_explicit", "_implicit"))
return(all_counts)
}
# Compute implicit counts
final_counts <- calculate_implicit_counts(explicit_counts)
# Print summary
cat("\nFinal Study Count Summary:\n")
cat("Total explicit study terms:", nrow(explicit_counts), "\n")
cat("Total implicit study terms:", nrow(final_counts) - nrow(explicit_counts), "\n")
explicit_counts
vo_terms_from_excel
vo_hierarchy_mapping
vo_hierarchy_mapping
explicit_counts
# Print mapping summary
cat("\nHierarchy Mapping Summary:\n")
cat("Total VO terms in Excel:", length(vo_terms_from_excel), "\n")
cat("Successfully mapped to Level 2 terms:", sum(!is.na(vo_hierarchy_mapping$Level2_Ancestor)), "\n")
calculate_implicit_counts <- function(explicit_counts) {
all_counts <- explicit_counts %>%
mutate(implicit_study_num = explicit_study_num)
# Aggregate implicit study counts by Level 2 ancestor
implicit_counts <- explicit_counts %>%
group_by(Level2_Ancestor) %>%
summarise(
implicit_study_num = sum(explicit_study_num, na.rm = TRUE),
STUDY_ACCESS_IDs = paste(unique(STUDY_ACCESS_IDs), collapse=", "),
.groups = "drop"
) %>%
rename(VO_ID = Level2_Ancestor)
# Merge implicit counts back into main dataset
all_counts <- all_counts %>%
left_join(implicit_counts, by = "VO_ID", suffix = c("_explicit", "_implicit"))
return(all_counts)
}
# Compute implicit counts
final_counts <- calculate_implicit_counts(explicit_counts)
final_counts
################################################################################
#####################  Set Current Working Directory ###########################
################################################################################
# Ensure rstudioapi is installed
if (!requireNamespace("rstudioapi", quietly = TRUE)) {
install.packages("rstudioapi")
}
library(rstudioapi)
# Set the working directory to the script’s location
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
print(current_path)
base_dir <- dirname(current_path)
################################################################################
#####################  Packages  ###############################################
################################################################################
# Install pacman for package management if not already installed
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman")
}
library(pacman)
# Required CRAN packages
cran_packages <- c(
"ontologyIndex", "ontologySimilarity", "readxl", "dplyr", "tidyr", "data.table"
)
# Automatically install and load CRAN packages
p_load(char = cran_packages, install = TRUE)
################################################################################
#####################  Load Ontology from OWL File #############################
################################################################################
# Define the OWL file path
owl_file <- file.path(base_dir, "vo.owl")
# Load ontology using `ontologyIndex`
ontology <- get_OBO(owl_file)
library(ontologyIndex)
ontology <- get_ontology("vo.obo", propagate_relationships = c("is_a", "part_of"))
ontology
ontology$ancestors
ontology$ancestors["VO_0019575"]
ontology$ancestors["VO_00195549"]
ontology$ancestors["VO_0019549"]
ontology$ancestors["VO:0019549"]
ontology$ancestors["VO:0005503"]
ontology$ancestors["VO:0004987"]
# Define the OWL file path
owl_file <- file.path(base_dir, "vo.obo")
# Load ontology using `ontologyIndex`
ontology <- get_OBO(owl_file)
# Ensure root ontology term is present
if (!"VO_0000001" %in% ontology$id) {
stop("VO_0000001 is not present in the ontology structure. Please check the OWL file.")
}
# Ensure root ontology term is present
if (!"VO:0000001" %in% ontology$id) {
stop("VO:0000001 is not present in the ontology structure. Please check the OWL file.")
}
################################################################################
#####################  Set Current Working Directory ###########################
################################################################################
# Ensure rstudioapi is installed
if (!requireNamespace("rstudioapi", quietly = TRUE)) {
install.packages("rstudioapi")
}
library(rstudioapi)
# Set the working directory to the script’s location
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
print(current_path)
base_dir <- dirname(current_path)
################################################################################
#####################  Packages  ###############################################
################################################################################
# Install pacman for package management if not already installed
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman")
}
library(pacman)
# Required CRAN packages
cran_packages <- c(
"ontologyIndex", "ontologySimilarity", "readxl", "dplyr", "tidyr", "data.table"
)
# Automatically install and load CRAN packages
p_load(char = cran_packages, install = TRUE)
################################################################################
#####################  Load Ontology from OBO File #############################
################################################################################
# Define the OBO file path
obo_file <- file.path(base_dir, "vo.obo")
# Load ontology using `ontologyIndex`
ontology <- get_OBO(obo_file, extract_tags = "everything")
# Ensure root ontology term is present
if (!"VO:0000001" %in% ontology$id) {
stop("VO:0000001 is not present in the ontology structure. Please check the OBO file.")
}
################################################################################
#####################  Load Study Data from Excel ##############################
################################################################################
# Define the Excel file path
excel_file <- file.path(base_dir, "UniqueStudy_VOIDs.xlsx")
# Load study data
figure_data <- read_excel(excel_file, sheet = "Data for Figure") %>%
rename(VO_ID = 1, Vaccine = 2, Study_num = 3, Pathogen_Type = 4, Disease = 5)
immport_data <- read_excel(excel_file, sheet = "ImmPortSTUDY_VO_Simple") %>%
rename(VO_ID = 1, STUDY_ACCESSION = 2, VO_Label = 3)
# Convert VO_ID format from "VO_0000738" to "VO:0000738"
convert_vo_format <- function(vo_id) {
return(gsub("VO_", "VO:", vo_id))
}
figure_data$VO_ID <- sapply(figure_data$VO_ID, convert_vo_format)
immport_data$VO_ID <- sapply(immport_data$VO_ID, convert_vo_format)
# Merge data
vo_map <- figure_data %>%
select(VO_ID, Pathogen_Type, Disease) %>%
filter(complete.cases(.)) %>%
distinct()
merged_data <- immport_data %>%
left_join(vo_map, by = "VO_ID") %>%
filter(complete.cases(.)) %>%
distinct()
# Print data summary
cat("Original immport data rows:", nrow(immport_data), "\n")
cat("Merged data rows with complete data:", nrow(merged_data), "\n")
# Create study count table
explicit_counts <- merged_data %>%
group_by(VO_ID, VO_Label, Pathogen_Type, Disease) %>%
summarise(
STUDY_ACCESS_IDs = paste(sort(unique(STUDY_ACCESSION)), collapse=", "),
explicit_study_num = n_distinct(STUDY_ACCESSION),
.groups = "drop"
)
################################################################################
#####################  Propagate Study Assignments Up the Tree #################
################################################################################
# Function to get all ancestors of a given ontology term
get_all_ancestors <- function(ontology, term) {
if (!term %in% ontology$id) return(NULL)
ancestors <- get_ancestors(ontology, term)
return(ancestors)
}
# Get all unique ontology terms from the study data
unique_vo_terms <- unique(explicit_counts$VO_ID)
# Create a mapping of ontology terms to all their ancestor terms
ontology_mapping <- lapply(unique_vo_terms, function(term) {
data.frame(Ontology_Term = term, Ancestor_Term = get_all_ancestors(ontology, term))
}) %>%
bind_rows()
# Merge study data with all ancestor terms
expanded_study_data <- explicit_counts %>%
rename(Explicit_Ontology_Term = VO_ID) %>%
left_join(ontology_mapping, by = c("Explicit_Ontology_Term" = "Ontology_Term"))
################################################################################
#####################  Count Studies for Each Ontology Term ####################
################################################################################
# Count unique study accessions for each ontology term (both explicit and propagated)
study_counts <- expanded_study_data %>%
group_by(Ancestor_Term) %>%
summarise(
Study_Count = n_distinct(STUDY_ACCESS_IDs),
.groups = "drop"
)
# Print summary
cat("\nFinal Ontology Study Assignment Summary:\n")
cat("Total unique ontology terms:", nrow(study_counts), "\n")
cat("Total unique study accessions:", sum(study_counts$Study_Count), "\n")
get_OBO
# Ensure rstudioapi is installed
if (!requireNamespace("rstudioapi", quietly = TRUE)) {
install.packages("rstudioapi")
}
?get_OBO
explicit_counts
